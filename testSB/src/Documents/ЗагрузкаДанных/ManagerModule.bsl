#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Прочитать файл данных.
// 
// Параметры:
//  Документ - ДокументСсылка.ЗагрузкаДанных - Документ
//  ИмяФайла -Строка  - Имя файла
//
Процедура ПрочитатьФайлДанных(Документ, ИмяФайла) Экспорт
	
	Чтение = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
	
	Строка = Чтение.ПрочитатьСтроку();
	
	Поля = СтрРазделить(Строка, ",", Истина);
	
	КолВоПолей = Поля.Количество();
	
	Строка = Чтение.ПрочитатьСтроку();		
	
	ТаблицаДиапазонов = Новый ТаблицаЗначений;
	ТаблицаДиапазонов.Колонки.Добавить("ДатаПрибытия", Новый ОписаниеТипов("Дата"));
	ТаблицаДиапазонов.Колонки.Добавить("ДатаУбытия", Новый ОписаниеТипов("Дата"));
	
	колвоСтрок = 0;
	ДиапазоныХранения = Новый Соответствие;
	МесяцыОтгрузки = Новый Соответствие;
	
	Пока Строка <> Неопределено Цикл
		
		колвоСтрок = колвоСтрок + 1;
		
		Попытка
			Поля = РассчетСтоимостиУслуг.ПрочитатьПоля(Строка, КолВоПолей);
		Исключение
			ЗаписатьСтатусДокумента(Документ, Перечисления.СтатусЗагрузкиДанных.ОшибкаЧтения, ОписаниеОшибки());
			Чтение.Закрыть();
			Возврат;
		КонецПопытки;
		
		Попытка
			
			стрДатаУбытия = Поля.Дата_Убытие;
			стрДатаПрибытия = Поля.Дата_Прибытие;
			
			ДатаУбытия = Дата(СтрЗаменить(стрДатаУбытия, "-", ""));
			
			КолвоОтгрузокХаб = МесяцыОтгрузки[НачалоМесяца(ДатаУбытия)];
			Если КолвоОтгрузокХаб = Неопределено Тогда
				КолвоОтгрузокХаб = 0;
			КонецЕсли;
			
			Если Поля.КодТипаОбработки = "Хаб" Тогда
				КолвоОтгрузокХаб = КолвоОтгрузокХаб + 1;
			КонецЕсли;
				
			МесяцыОтгрузки.Вставить(НачалоМесяца(ДатаУбытия), КолвоОтгрузокХаб);
			
			Если ДиапазоныХранения[стрДатаУбытия + стрДатаПрибытия] = Неопределено Тогда
				
				Диапазон = ТаблицаДиапазонов.Добавить();
				Диапазон.ДатаПрибытия = Дата(СтрЗаменить(стрДатаПрибытия, "-", ""));
				Диапазон.ДатаУбытия = ДатаУбытия;
				
				ДиапазоныХранения.Вставить(стрДатаУбытия + стрДатаПрибытия, Истина);
				
			КонецЕсли;
			
		Исключение
			
			ЗаписатьСтатусДокумента(Документ, Перечисления.СтатусЗагрузкиДанных.ОшибкаЧтения, ОписаниеОшибки());
			Чтение.Закрыть();
			Возврат;
			
		КонецПопытки;
		
		Строка = Чтение.ПрочитатьСтроку();
		
	КонецЦикла;
	
	Чтение.Закрыть();	
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Документ);
	МассивПараметров.Добавить(ИмяФайла);
	МассивПараметров.Добавить(МесяцыОтгрузки);
	
	ЗаписатьСтатусДокумента(Документ, Перечисления.СтатусЗагрузкиДанных.ИдетРассчет);
	
	МассивЗаданий = Новый Массив;
	МассивЗаданий.Добавить(ФоновыеЗадания.Выполнить("РассчетСтоимостиУслуг.ЗаписатьСтоимостьОбработкиХаб", МассивПараметров, , "ЗаписатьСтоимостьОбработкиХаб"));
	МассивЗаданий.Добавить(ФоновыеЗадания.Выполнить("РассчетСтоимостиУслуг.ЗаписатьСтоимостьОбработки", МассивПараметров, , "ЗаписатьСтоимостьОбработки"));
	
	МассивПараметров.Добавить(ТаблицаДиапазонов);
	МассивЗаданий.Добавить(ФоновыеЗадания.Выполнить("РассчетСтоимостиУслуг.ЗаписатьСтоимостьХранения", МассивПараметров, , "ЗаписатьСтоимостьХранения"));
	
	Попытка
		ФоновыеЗадания.ОжидатьЗавершенияВыполнения(МассивЗаданий);
		ЗаписатьСтатусДокумента(Документ, Перечисления.СтатусЗагрузкиДанных.РассчетЗавершен);
	Исключение
		ЗаписатьСтатусДокумента(Документ, Перечисления.СтатусЗагрузкиДанных.ОшибкаРассчета, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ОчиститьДанные(Документ) Экспорт
	
	НачатьТранзакцию();
	
	ЗаписатьСтатусДокумента(Документ, Перечисления.СтатусЗагрузкиДанных.ПустаяСсылка());
	
	регСтоимостьУслугСортировки = РегистрыНакопления.СтоимостьУслугСортировки.СоздатьНаборЗаписей();
	регСтоимостьУслугСортировки.Отбор.Регистратор.Установить(Документ);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.СтоимостьУслугСортировки.НаборЗаписей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Регистратор", Документ);
	
	Попытка
		Блокировка.Заблокировать();
		регСтоимостьУслугСортировки.Записать();	
		ЗафиксироватьТранзакцию();
	Исключение		
		ОтменитьТранзакцию();
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьСтатусДокумента(Документ, Статус, Комментарий = "") Экспорт
	
	ДокОбъект = Документ.ПолучитьОбъект();
	ДокОбъект.СтатусЗагрузкиДанных = Статус;
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		ДокОбъект.Комментарий = Комментарий;
	КонецЕсли;
	ДокОбъект.Записать();
	
КонецПроцедуры

Функция ПрочитатьСтатусДокумента(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗагрузкаДанных.СтатусЗагрузкиДанных КАК СтатусЗагрузкиДанных
	|ИЗ
	|	Документ.ЗагрузкаДанных КАК ЗагрузкаДанных
	|ГДЕ
	|	ЗагрузкаДанных.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ?(ВыборкаДетальныеЗаписи.Следующий(), ВыборкаДетальныеЗаписи.СтатусЗагрузкиДанных, Неопределено);

КонецФункции

#КонецОбласти

#КонецЕсли
